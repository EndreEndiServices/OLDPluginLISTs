name: ServerKits
main: ServerKits\Main
version: "1.3"
api: [1.11.0]
load: STARTUP
author: EvolSoft
description: Create custom kits for your server
website: http://www.evolsoft.tk

commands:
  serverkits:
    aliases: [skits]
    description: ServerKits Commands.
    permission: serverkits
  kit:
    description: ServerKits Kit command.
    permission: serverkits.commands.kit
permissions:
  serverkits:
    default: op
    description: ServerKits permissions.
    children:
      serverkits.kit:
        default: op
        description: ServerKits Kit permissions.
      serverkits.use-sign:
        default: true
        description: Allows player to use ServerKits signs.
      serverkits.create-sign:
        default: op
        description: Allows player to create ServerKits signs.
      serverkits.commands:
        default: op
        description: ServerKits commands permissions.
        children:
          serverkits.commands.help:
            default: op
            description: ServerKits command Help permission.
          serverkits.commands.info:
            default: op
            description: ServerKits command Info permission.
          serverkits.commands.reload:
            default: op
            description: ServerKits command Reload permission.
          serverkits.commands.kit:
            default: true
            description: ServerKits command Kit permission.<?php

/*
 * ServerKits (v1.3) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 14/02/2015 12:19 AM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/ServerKits/blob/master/LICENSE)
 */

namespace ServerKits;

use pocketmine\Player;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\plugin\PluginBase;
use pocketmine\permission\Permission;
use pocketmine\Server;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;
use pocketmine\item\Item;
use pocketmine\command\ConsoleCommandSender;
//MassiveEconomy plugin API
use MassiveEconomy\MassiveEconomyAPI;

class Main extends PluginBase{
    
	//About Plugin Const
	const PRODUCER = "EvolSoft";
	const VERSION = "1.3";
	const MAIN_WEBSITE = "http://www.evolsoft.tk";
	//Other Const
	//Prefix
	const PREFIX = "&7[&cServer&4Kits&7] ";
	
	public $cfg;
	
	public $economy;
	
	public function translateColors($symbol, $message){
	
		$message = str_replace($symbol."0", TextFormat::BLACK, $message);
		$message = str_replace($symbol."1", TextFormat::DARK_BLUE, $message);
		$message = str_replace($symbol."2", TextFormat::DARK_GREEN, $message);
		$message = str_replace($symbol."3", TextFormat::DARK_AQUA, $message);
		$message = str_replace($symbol."4", TextFormat::DARK_RED, $message);
		$message = str_replace($symbol."5", TextFormat::DARK_PURPLE, $message);
		$message = str_replace($symbol."6", TextFormat::GOLD, $message);
		$message = str_replace($symbol."7", TextFormat::GRAY, $message);
		$message = str_replace($symbol."8", TextFormat::DARK_GRAY, $message);
		$message = str_replace($symbol."9", TextFormat::BLUE, $message);
		$message = str_replace($symbol."a", TextFormat::GREEN, $message);
		$message = str_replace($symbol."b", TextFormat::AQUA, $message);
		$message = str_replace($symbol."c", TextFormat::RED, $message);
		$message = str_replace($symbol."d", TextFormat::LIGHT_PURPLE, $message);
		$message = str_replace($symbol."e", TextFormat::YELLOW, $message);
		$message = str_replace($symbol."f", TextFormat::WHITE, $message);
	
		$message = str_replace($symbol."k", TextFormat::OBFUSCATED, $message);
		$message = str_replace($symbol."l", TextFormat::BOLD, $message);
		$message = str_replace($symbol."m", TextFormat::STRIKETHROUGH, $message);
		$message = str_replace($symbol."n", TextFormat::UNDERLINE, $message);
		$message = str_replace($symbol."o", TextFormat::ITALIC, $message);
		$message = str_replace($symbol."r", TextFormat::RESET, $message);
	
		return $message;
	}
	
	public function registerFirstJoin(Player $player){
		@mkdir($this->getDataFolder() . "data/");
		$tmp = new Config($this->getDataFolder() . "data/" . strtolower($player->getName() . ".dat"));
		$tmp->save();
	}
	
	public function hasJoinedFirstTime(Player $player){
		if(file_exists($this->getDataFolder() . "data/" . strtolower($player->getName() . ".dat"))){
			return false;
		}else{
			return true;
		}
	}
	
    public function onEnable(){
    	@mkdir($this->getDataFolder());
    	$this->saveDefaultConfig();
    	$this->saveResource("kits.yml");
    	$this->cfg = $this->getConfig()->getAll();
    	$this->getCommand("serverkits")->setExecutor(new Commands\Commands($this));
    	$this->getCommand("kit")->setExecutor(new Commands\Kit($this));
    	$this->initializeKitsPermissions();
    	$this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
    	//Check if MassiveEconomy is installed
    	if($this->getServer()->getPluginManager()->getPlugin("MassiveEconomy") != false){
    		//Checking if MassiveEconomyAPI version is compatible
    		if(MassiveEconomyAPI::getInstance()->getAPIVersion() == "0.90"){
    			$this->economy = true;
    			Server::getInstance()->getLogger()->info($this->translateColors("&", Main::PREFIX . "&aEconomy support enabled!"));
    		}else{
    			$this->economy = false;
    			Server::getInstance()->getLogger()->info($this->translateColors("&", Main::PREFIX . "&cEconomy support not available. Please use MassiveEconomy (API v0.90)"));
    		}
    	}else{
    		$this->economy = false;
    		Server::getInstance()->getLogger()->info($this->translateColors("&", Main::PREFIX . "&cEconomy support not available. Please install MassiveEconomy to enable Economy support"));
    	}
    }
    //Config Functions   
    public function isDefaultKitEnabled(){
    	$tmp = $this->getConfig()->getAll();
    	return $tmp["enable-default-kit"];
    }
    
    public function getDefaultKit(){
    	$tmp = $this->getConfig()->getAll();
    	return $tmp["default-kit"];
    }
    
    public function getUsePermissions(){
    	$tmp = $this->getConfig()->getAll();
    	return $tmp["use-permissions"];
    }
    
    public function getEnableSigns(){
    	$tmp = $this->getConfig()->getAll();
    	return $tmp["enable-signs"];
    }
    
    public function getKitReceivedMessage(Player $player, $kit){
    	$tmp = $this->getConfig()->getAll();
    	$format = $tmp["kit-received-message"];
    	//Check if the kit exists
    	if($this->KitExists($kit)){
    		$format = str_replace("{KIT}", $kit, $format);
    	}else{
    		$format = str_replace("{KIT}", "", $format);
    	}
    	$format = str_replace("{KIT_NAME}", $this->getKitName($kit), $format);
		$format = str_replace("{PLAYER}", $player->getName(), $format);
		$format = str_replace("{PRICE}", $this->getKitPrice($kit), $format);
		return $format;
    }
    //Kits Config functions
    public function initializeKitsPermissions(){
    	$tmp = new Config($this->getDataFolder() . "kits.yml");
    	$tmp = $tmp->getAll();
    	$kits = $this->getAllKits();
    	for($i = 0; $i < count($kits); $i++){
    		$permission = new Permission("serverkits.kit." . strtolower($kits[$i]), "ServerKits " . $kits[$i] . " kit permission.");
    		Server::getInstance()->getPluginManager()->addPermission($permission);
    	}
    }
    
    public function KitExists($kit){
    	$tmp = new Config($this->getDataFolder() . "kits.yml");
    	$tmp = $tmp->getAll();
    	return isset($tmp[$kit]);
    }
    
    public function getAllKits(){
    	$tmp = new Config($this->getDataFolder() . "kits.yml");
    	$tmp = $tmp->getAll();
    	return array_keys($tmp);
    }
    
    public function getKitName($kit){
    	$tmp = new Config($this->getDataFolder() . "kits.yml");
    	$tmp = $tmp->getAll();
    	if($this->KitExists($kit) && isset($tmp[$kit]["name"])){
    		return $tmp[$kit]["name"];
    	}else{
    		return false;
    	}
    }
    
    public function getKitPrice($kit){
    	$tmp = new Config($this->getDataFolder() . "kits.yml");
    	$tmp = $tmp->getAll();
    	if($this->KitExists($kit) && isset($tmp[$kit]["price"])){
    		return $tmp[$kit]["price"];
    	}else{
    		return false;
    	}
    }

    public function parseKitItems(Player $player, $kit){
    	$tmp = new Config($this->getDataFolder() . "kits.yml");
    	$tmp = $tmp->getAll();
    	//Check if kit exists
    	if($this->KitExists($kit)){
    		//Check if items are set
    		if(isset($tmp[$kit]["items"])){
    			for($i = 0; $i < count($tmp[$kit]["items"]); $i++){
    				$item_parse = explode(" ", $tmp[$kit]["items"][$i]);
    				$item = $item_parse[0];
    				$amount = $item_parse[1];
    				for($a = 0; $a < $amount; $a++){
    					$player->getInventory()->addItem(Item::fromString($item));
    				}
    			}
    			return 2;
    		}else{
    			return 1;
    		}
    	}else{
    		return 0;
    	}
    }
    
    public function parseKitCommands(Player $player, $kit){
    	$tmp = new Config($this->getDataFolder() . "kits.yml");
    	$tmp = $tmp->getAll();
        //Check if kit exists
    	if($this->KitExists($kit)){
    		//Check if commands are set
    		if(isset($tmp[$kit]["commands"])){
    			for($i = 0; $i < count($tmp[$kit]["commands"]); $i++){
    				$console = new ConsoleCommandSender();
    				$this->getServer()->dispatchCommand($console, $this->translateColors("&", $this->getFormattedCommand($tmp[$kit]["commands"][$i], $player, $kit)));
    			}
    			return 2;
    		}else{
    			return 1;
    		}
    	}else{
    		return 0;
    	}
    }
    
    public function getFormattedCommand($command, Player $player, $kit){
    	//Check if the kit exists
    	if($this->KitExists($kit)){
    		$command = str_replace("{KIT}", $kit, $command);
    	}else{
    		$command = str_replace("{KIT}", "", $command);
    	}
    	$command = str_replace("{KIT_NAME}", $this->getKitName($kit), $command);
    	$command = str_replace("{PLAYER}", $player->getName(), $command);
    	$command = str_replace("{PRICE}", $this->getKitPrice($kit), $command);
    	return $command;
    }
    
    public function giveKit(Player $player, $kit){
    	$tmp = new Config($this->getDataFolder() . "kits.yml");
    	$tmp = $tmp->getAll();
    	//Check if kit exists
    	if($this->KitExists($kit)){
    		//Check if player is in creative
    		if($player->isCreative()){
    			return 2;
    		}else{
    			//Checking Price & Economy support
    			if($this->economy == true && $this->getKitPrice($kit) != false && $this->getKitPrice($kit) > 0){
    				$result = MassiveEconomyAPI::getInstance()->takeMoney($player->getName(), $this->getKitPrice($kit));
    				if($result == 2){
    					//Parse Items
    					$this->parseKitItems($player, $kit);
    					//Parse Commands
    					$this->parseKitCommands($player, $kit);
    					return 0; //Success!
    				}elseif($result == 1){
    					return 3; //Failed: Not enough money
    				}
    			}else{
    				//Parse Items
    				$this->parseKitItems($player, $kit);
    				//Parse Commands
    				$this->parseKitCommands($player, $kit);
    				return 0;
    			}
    		}
    	}else{
    		return 1;
    	}
    }
    
}
?>---
Default:
  name: "&bDefault_KIT"
  price: 0
  items:
    - "272 1"
    - "274 1"
    - "260 10"
    - "298 1"
    - "299 1"
    - "300 1"
    - "301 1"
  commands:
    - "tell {PLAYER} Kit Command Example"
Tools:
  name: "&2Tools"
  price: 0
  items:
    - "272 1"
    - "273 1"
    - "274 1"
    - "275 1"
Iron:
  name: "&7IronKit"
  price: 50
  items:
    - "261 1"
    - "262 16"
    - "267 1"
    - "306 1"
    - "307 1"
    - "308 1"
    - "309 1"
Diamond:
  name: "&9D&bIAMON&9D"
  price: 200
  items:
    - "261 1"
    - "262 32"
    - "276 1"
    - "310 1"
    - "311 1"
    - "312 1"
    - "313 1"
...---
economy-plugin: 1
enable-default-kit: true
default-kit: "Default"
use-permissions: false
enable-signs: true
kit-received-message: "&aYou received the {KIT_NAME} &akit"
...<?php

/*
 * ServerKits (v1.3) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 29/12/2014 09:45 AM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/ServerKits/blob/master/LICENSE)
 */

namespace ServerKits\Commands;

use pocketmine\plugin\PluginBase;
use pocketmine\permission\Permission;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\Player;
use pocketmine\utils\TextFormat;

use ServerKits\Main;
use ServerKits\EventListener;

class Commands extends PluginBase implements CommandExecutor{

	public function __construct(Main $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) {
    	$fcmd = strtolower($cmd->getName());
    	switch($fcmd){
    		case "serverkits":
    			if(isset($args[0])){
    				$args[0] = strtolower($args[0]);
    				if($args[0]=="help"){
    					if($sender->hasPermission("serverkits.commands.help")){
    						$sender->sendMessage($this->plugin->translateColors("&", "&7<<>> &cAvailable Commands &7<<>>"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&c/serverkits info &7<>&a Show info about this plugin"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&c/serverkits help &7<>&a Show help about this plugin"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&c/serverkits reload &7<>&a Reload the config"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&c/kit &7<>&a Get a kit"));
    						break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}elseif($args[0]=="info"){
    					if($sender->hasPermission("serverkits.commands.info")){
    						$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&7ServerKits &av" . Main::VERSION . " &7developed by&a " . Main::PRODUCER));
    						$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&7Website &a" . Main::MAIN_WEBSITE));
    				        break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}elseif($args[0]=="reload"){
    					if($sender->hasPermission("serverkits.commands.reload")){
    						$this->plugin->reloadConfig();
    						$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&aConfiguration Reloaded."));
    				        break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}else{
    					if($sender->hasPermission("serverkits")){
    						$sender->sendMessage($this->plugin->translateColors("&",  Main::PREFIX . "&cSubcommand &a" . $args[0] . " &cnot found. Use &a/serverkits help &cto show available commands"));
    						break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}
    				}else{
    					if($sender->hasPermission("serverkits.commands.help")){
    						$sender->sendMessage($this->plugin->translateColors("&", "&7<<>> &cAvailable Commands &7<<>>"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&c/serverkits info &7<>&a Show info about this plugin"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&c/serverkits help &7<>&a Show help about this plugin"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&c/serverkits reload &7<>&a Reload the config"));
    						$sender->sendMessage($this->plugin->translateColors("&", "&c/kit &7<>&a Get a kit"));
    						break;
    					}else{
    						$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    						break;
    					}
    				}
    			}
    	}
}
?><?php

/*
 * ServerKits (v1.3) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 29/12/2014 09:43 AM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/ServerKits/blob/master/LICENSE)
 */

namespace ServerKits\Commands;

use pocketmine\plugin\PluginBase;
use pocketmine\permission\Permission;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\Player;
use pocketmine\utils\TextFormat;

use ServerKits\Main;
use ServerKits\EventListener;

class Kit extends PluginBase implements CommandExecutor{

	public function __construct(Main $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) {
    	$fcmd = strtolower($cmd->getName());
    	switch($fcmd){
    		case "kit":
    			//Player Sender
    			if($sender instanceof Player){
    				if($sender->hasPermission("serverkits.commands.kit")){
    					//Initialize kit permissions
    					$this->plugin->initializeKitsPermissions();
    					//Check if use-permissions is enabled
    					if($this->plugin->getUsePermissions()){
    						if(isset($args[0])){
    							//Check if kit exists
    							if($this->plugin->KitExists($args[0])){
    								//Check if player has kit permissions
    								if($sender->hasPermission("serverkits.kit." . strtolower($args[0]))){
    									$status = $this->plugin->giveKit($sender, $args[0]);
    									if($status == 0){
    										$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . $this->plugin->getKitReceivedMessage($sender, $args[0])));
    									}elseif($status == 1){
    										$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cKit not found."));
    									}elseif($status == 2){
    										$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou can't get the kit because you are in creative"));
    									}elseif($status == 3){
    										$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou don't have enough money to get the kit"));
    									}
    								}else{
    									$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to get this kit"));
    								}
    							}else{
    								$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cKit not found."));
    							}
    						}else{
    							$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&4Available Kits:"));
    							$kits = $this->plugin->getAllKits();
    							$result = "";
    							if($sender->hasPermission("serverkits.kit." . strtolower($kits[0]))){
    								$result = $kits[0];
    							}
    							//Count all kits
    							for($i = 1; $i < count($kits); $i++){
    								if($sender->hasPermission("serverkits.kit." . strtolower($kits[$i]))){
    									$result = $result . ", " . $kits[$i];
    								}
    							}
    							if(isset($result{0})){
    								if($result{0} == ","){
    									$result = substr($result, 2);
    								}
    							}
    							$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . $result));
    						}
    					}else{
    						if(isset($args[0])){
    							//Check if kit exists
    							if($this->plugin->KitExists($args[0])){
    								$status = $this->plugin->giveKit($sender, $args[0]);
    								if($status == 0){
    									$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . $this->plugin->getKitReceivedMessage($sender, $args[0])));
    								}elseif($status == 1){
    									$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cKit not found."));
    								}elseif($status == 2){
    									$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou can't get the kit because you are in creative"));
    								}elseif($status == 3){
    									$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou don't have enough money to get the kit"));
    								}
    							}else{
    								$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cKit not found."));
    							}
    						}else{
    							$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&4Available Kits:"));
    							$kits = $this->plugin->getAllKits();
    							$result = $kits[0];
    							//Count all kits
    							for($i = 1; $i < count($kits); $i++){
    								$result = $result . ", " . $kits[$i];
    							}
    							$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . $result));
    						}
    					}
    					break;
    				}else{
    					$sender->sendMessage($this->plugin->translateColors("&", "&cYou don't have permissions to use this command"));
    					break;
    				}
    			}else{
    				$sender->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou can only perform this command as a player"));
    				break;
    			}
    	}
    }
}<?php

/*
 * ServerKits (v1.3) by EvolSoft
 * Developer: EvolSoft (Flavius12)
 * Website: http://www.evolsoft.tk
 * Date: 14/02/2015 12:31 AM (UTC)
 * Copyright & License: (C) 2014-2015 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/ServerKits/blob/master/LICENSE)
 */

namespace ServerKits;

use pocketmine\Player;
use pocketmine\Server;
use pocketmine\event\Listener;
use pocketmine\event\block\SignChangeEvent;
use pocketmine\event\player\PlayerInteractEvent;
use pocketmine\event\player\PlayerEvent;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\tile\Sign;
use pocketmine\level\Position;
use pocketmine\math\Vector3;
use pocketmine\permission\Permission;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;
//MassiveEconomy plugin API
use MassiveEconomy\MassiveEconomyAPI;

class EventListener extends PluginBase implements Listener{
	
	public function __construct(Main $plugin){
        $this->plugin = $plugin;
    }
    
    public function onPlayerJoin(PlayerJoinEvent $event){
    	$player = $event->getPlayer();
    	//Initialize kit permissions
    	$this->plugin->initializeKitsPermissions();
    	$kit = $this->plugin->getDefaultKit();
    	//Get if player has joined for first time
    	if($this->plugin->hasJoinedFirstTime($player)){
    		$this->plugin->registerFirstJoin($player);
    		//Check use-permissions
    		if($this->plugin->getUsePermissions()){
    			if($player->hasPermission("serverkits.kit." . strtolower($kit))){
    				$status = $this->plugin->giveKit($player, $kit);
    				if($status == 0){
    					$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . $this->plugin->getKitReceivedMessage($player, $kit)));
    				}elseif($status == 1){
    					$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cKit not found."));
    				}elseif($status == 2){
    					$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou can't get the kit because you are in creative"));
    				}elseif($status == 3){
    					$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou don't have enough money to get the kit"));
    				}
    			}
    		}else{
    			$status = $this->plugin->giveKit($player, $kit);
    			if($status == 0){
    				$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . $this->plugin->getKitReceivedMessage($player, $kit)));
    			}elseif($status == 1){
    				$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cKit not found."));
    			}elseif($status == 2){
    				$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou can't get the kit because you are in creative"));
    			}elseif($status == 3){
    				$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou don't have enough money to get the kit"));
    			}
    		}
    	}
    }
    
    public function onSignInteract(PlayerInteractEvent $event){
    	//Check if Kit sign usage is allowed
    	if($this->plugin->getEnableSigns()){
    		//Checking Permissions
    		if($event->getPlayer()->hasPermission("serverkits.use-sign") == true){
    			if($event->getBlock()->getID() == 323 || $event->getBlock()->getID() == 63 || $event->getBlock()->getID() == 68){
    				$sign = $event->getPlayer()->getLevel()->getTile($event->getBlock());
    				if($sign instanceof Sign){
    					//Initialize vars
    					$txtsign = $sign->getText();
    					$lvl = $event->getPlayer()->getLevel()->getName();
    					$sx = $sign->x;
    					$sy = $sign->y;
    					$sz = $sign->z;
    					if($txtsign[0] == "[ServerKits]"){
    						//Kit Sign
    						$player = $event->getPlayer();
    						$kit = $txtsign[1];
    						//Check use-permissions
    						if($this->plugin->getUsePermissions()){
    							if($player->hasPermission("serverkits.kit." . strtolower($kit))){
    								$status = $this->plugin->giveKit($player, $kit);
    								if($status == 0){
    									$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . $this->plugin->getKitReceivedMessage($player, $kit)));
    								}elseif($status == 1){
    									$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cKit not found."));
    								}elseif($status == 2){
    									$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou can't get the kit because you are in creative"));
    								}elseif($status == 3){
    									$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou don't have enough money to get the kit"));
    								}
    							}
    						}else{
    							$status = $this->plugin->giveKit($player, $kit);
    							if($status == 0){
    								$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . $this->plugin->getKitReceivedMessage($player, $kit)));
    							}elseif($status == 1){
    								$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cKit not found."));
    							}elseif($status == 2){
    								$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou can't get the kit because you are in creative"));
    							}elseif($status == 3){
    								$player->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cYou don't have enough money to get the kit"));
    							}
    						}
    					}
    				}
    			}
    		}
    	}
    }
    
    public function onSignCreate(SignChangeEvent $event){
    	//Check if Kit sign usage is allowed
    	if($this->plugin->getEnableSigns()){
    		//Checking Permissions
    		if($event->getPlayer()->hasPermission("serverkits.create-sign") == true){
    			if($event->getBlock()->getID() == 323 || $event->getBlock()->getID() == 63 || $event->getBlock()->getID() == 68){
    				$sign = $event->getPlayer()->getLevel()->getTile($event->getBlock());
    				if($sign instanceof Sign){
    					$line0 = $event->getLine(0);
    					$line1 = $event->getLine(1);
    					if($line0=='[ServerKits]'){
    						//Check if a kit is specified
    						if(empty($line1) !== true){
    							//Check if the kit exists
    							if($this->plugin->KitExists($line1)){
    								$price = $this->plugin->getKitPrice($line1);
    								//Check Economy support & Price
    								if($this->plugin->economy == true && $price > 0){
    									$symbol = MassiveEconomyAPI::getInstance()->getMoneySymbol();
    									$event->setLine(2, $price . $symbol);
    								}
    								$event->getPlayer()->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&aKit sign created"));
    							}else{
    								$event->getPlayer()->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cCan't create sign: Kit not found."));
    							}
    						}else{
    							$event->getPlayer()->sendMessage($this->plugin->translateColors("&", Main::PREFIX . "&cCan't create sign: You must specify a kit."));
    						}
    					}
    				}
    			}
    		}
    	}
    }
	
}
?>