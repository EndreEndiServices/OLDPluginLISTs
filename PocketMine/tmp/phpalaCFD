name: TapToDo
main: taptodo\TapToDo
version: 2.2.1
author: Falk
api: [1.0.0]
load: POSTWORLD
commands:
 t:
  permission: taptodo.command
  description: TapToDo command!
  usage: /t <add <command> / del <command> / delall / name / list>
 tr:
  permission: taptodo.remote
  description: Remote block managment
  usage: /tr <name> <add <command> / del <command> / delall / name / list>
permissions:
 taptodo:
  default: op
  description: Top level TapToDo permission
  children:
   taptodo.command:
    default: op
    children:
     taptodo.command.add:
      default: op
      description: Add new commands
     taptodo.command.del:
      default: op
      description: Delete a specific command
     taptodo.command.delall:
      default: op
      description: Clear commands off block
     taptodo.command.name:
      default: op
      description: Name taptodo blocks
     taptodo.command.list:
      default: op
      description: List commands on a block
   taptodo.tap:
    default: true
    description: Use taptodo blocks
<?php
namespace taptodo;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\event\level\LevelLoadEvent;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerInteractEvent;
use pocketmine\level\Position;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;

class TapToDo extends PluginBase implements CommandExecutor, Listener{
    public $sessions;
    /** @var  Block[] */
    public $blocks;
    /** @var  Config */
    private $blocksConfig;
    public function onEnable(){
        $this->sessions = [];
        $this->blocks = [];
        $this->saveResource("blocks.yml");
        $this->blocksConfig = (new ConfigUpdater(new Config($this->getDataFolder() . "blocks.yml", Config::YAML, array()), $this))->checkConfig();
        $this->getServer()->getPluginManager()->registerEvents($this, $this);
        $this->parseBlockData();
    }
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args){
        if($cmd->getName() == "tr"){
            if(isset($args[1])){
                if($sender->hasPermission("taptodo.command." . $args[1])){
                    switch($args[1]){
                        case "add":
                            $i = 0;
                            $name = array_shift($args);
                            array_shift($args);
                            foreach($this->getBlocksByName($name) as $block){
                                $block->addCommand(implode(" ", $args));
                                $i++;
                            }
                            $sender->sendMessage("Added command to $i blocks.");
                            return true;
                            break;
                        case "del":
                            $i = 0;
                            $name = array_shift($args);
                            array_shift($args);
                            foreach($this->getBlocksByName($name) as $block){
                                if(($block->deleteCommand(implode(" ", $args))) !== false){
                                    $i++;
                                }
                            }
                            $sender->sendMessage("Deleted command from $i blocks.");
                            return true;
                            break;
                        case "delall":
                            $i = 0;
                            foreach($this->getBlocksByName($args[0]) as $block){
                                $this->deleteBlock($block);
                                $i++;
                            }
                            $sender->sendMessage("Deleted $i blocks.");
                            return true;
                            break;
                        case "name":
                        case "rename":
                            $i = 0;
                            foreach($this->getBlocksByName($args[0]) as $block){
                                $block->setName($block);
                                $i++;
                            }
                            $sender->sendMessage("Renamed $i blocks.");
                            return true;
                            break;
                        case "list":
                            $i = 0;
                            foreach($this->getBlocksByName($args[0]) as $block){
                                $pos = $block->getPosition();
                                $sender->sendMessage("Commands for block at X:" . $pos->getX() . " Y:" . $pos->getY() . " Z:" . $pos->getY() . " Level:" . $pos->getLevel()->getName());
                                foreach($block->getCommands() as $cmd){
                                    $sender->sendMessage("- $cmd");
                                }
                                $i++;
                            }
                            $sender->sendMessage("Listed $i blocks.");
                            return true;
                            break;
                        default:
                            return false;
                            break;
                    }
                }
                else{
                    return false;
                }
            }
            else{
                return false;
            }
        }
        else{
            if($sender instanceof Player){
                if(isset($args[0])){
                    if($sender->hasPermission("taptodo.command." . $args[0])){
                        $this->sessions[$sender->getName()] = $args;
                        $sender->sendMessage("Tap a block to complete action...");
                        return true;
                    }
                    else{
                        $sender->sendMessage("You don't have permission to perform that action.");
                        return true;
                    }
                }
            }
            else{
                $sender->sendMessage("Please run this command in game.");
                return true;
            }
        }
        return true;
    }
    public function onInteract(PlayerInteractEvent $event){
        if(isset($this->sessions[$event->getPlayer()->getName()])){
            $args = $this->sessions[$event->getPlayer()->getName()];
            switch($args[0]){
                case "add":
                    if(isset($args[1])){
                        if(($b = $this->getBlock($event->getBlock(), null, null, null)) instanceof Block){
                            array_shift($args);
                            $b->addCommand(implode(" ", $args));
                            $event->getPlayer()->sendMessage("Command added.");
                        }
                        else{
                            array_shift($args);
                            $this->addBlock($event->getBlock(), implode(" ", $args));
                            $event->getPlayer()->sendMessage("Command added.");
                        }
                    }
                    else{
                        $event->getPlayer()->sendMessage("You must specify a command.");
                    }
                    break;
                case "del":
                    if(isset($args[1])){
                        if(($b = $this->getBlock($event->getBlock(), null, null, null)) instanceof Block){
                            array_shift($args);
                            if(($b->deleteCommand(implode(" ", $args))) !== false){
                                $event->getPlayer()->sendMessage("Command removed.");
                            }
                            else{
                                $event->getPlayer()->sendMessage("Couldn't find command.");
                            }

                        }
                        else{
                            $event->getPlayer()->sendMessage("Block does not exist.");
                        }
                    }
                    else{
                        $event->getPlayer()->sendMessage("You must specify a command.");
                    }
                    break;
                case "delall":
                    if(($b = $this->getBlock($event->getBlock(), null, null, null)) instanceof Block){
                        $this->deleteBlock($b);
                        $event->getPlayer()->sendMessage("Block deleted.");
                    }
                    else{
                        $event->getPlayer()->sendMessage("Block doesn't exist.");
                    }
                    break;
                case "name":
                    if(isset($args[1])){
                        if(($b = $this->getBlock($event->getBlock(), null, null, null)) instanceof Block){
                            $b->setName($args[1]);
                            $event->getPlayer()->sendMessage("Block named.");
                        }
                        else{
                            $event->getPlayer()->sendMessage("Block doesn't exist.");
                        }
                    }
                    else{
                        $event->getPlayer()->sendMessage("You need to specify a name.");
                    }
                    break;
                case "list":
                    if(($b = $this->getBlock($event->getBlock(), null, null, null)) instanceof Block){
                        foreach($b->getCommands() as $cmd){
                            $event->getPlayer()->sendMessage($cmd);
                        }
                    }
                    else{
                        $event->getPlayer()->sendMessage("Block doesn't exist.");
                    }
                    break;
            }
            unset($this->sessions[$event->getPlayer()->getName()]);
        }
        else{
            if(($b = $this->getBlock($event->getBlock(), null, null, null)) instanceof Block && $event->getPlayer()->hasPermission("taptodo.tap")){
                $b->executeCommands($event->getPlayer());
            }
        }
    }
    public function onLevelLoad(LevelLoadEvent $event){
        $this->getLogger()->info("Reloading blocks due to level " . $event->getLevel()->getName() . " loaded...");
        $this->parseBlockData();
    }

    /**
     * @param $name
     * @return Block[]
     */
    public function getBlocksByName($name){
        $ret = [];
        foreach($this->blocks as $block){
            if($block->getName() === $name) $ret[] = $block;
        }
        return $ret;
    }

    /**
     * @param $x
     * @param $y
     * @param $z
     * @param $level
     * @return Block
     */
    public function getBlock($x, $y, $z, $level){
        if($x instanceof Position) return (isset($this->blocks[$x->getX() . ":" . $x->getY() . ":" . $x->getZ() . ":" . $x->getLevel()->getName()]) ? $this->blocks[$x->getX() . ":" . $x->getY() . ":" . $x->getZ() . ":" . $x->getLevel()->getName()] : false);
        else return (isset($this->blocks[$x . ":" . $y . ":" . $z . ":" . $level]) ? $this->blocks[$x . ":" . $y . ":" . $z . ":" . $level] : false);
    }
    /**
     *
     */
    public function parseBlockData(){
        $this->blocks = [];
        foreach($this->blocksConfig->get("blocks") as $i => $block){
            if($this->getServer()->isLevelLoaded($block["level"])){
                $pos = new Position($block["x"], $block["y"], $block["z"], $this->getServer()->getLevelByName($block["level"]));
                if(isset($block["name"])) $this->blocks[$pos->__toString()] = new Block($pos, $block["commands"], $this, $block["name"]);
                else $this->blocks[$block["x"] . ":" . $block["y"] . ":" . $block["z"] . ":" . $block["level"]] = new Block($pos, $block["commands"], $this, $i);
            }
            else{
                $this->getLogger()->warning("Could not load block in level " . $block["level"] . " because that level is not loaded.");
            }
        }
    }

    /**
     * @param Block $block
     */
    public function deleteBlock(Block $block){
        $blocks = $this->blocksConfig->get("blocks");
        unset($blocks[$block->id]);
        $this->blocksConfig->set("blocks", $blocks);
        $this->blocksConfig->save();
        $this->parseBlockData();
    }
    /**
     * @param Position $p
     * @param $cmd
     * @return Block
     */
    public function addBlock(Position $p, $cmd){
        $block = new Block(new Position($p->getX(), $p->getY(), $p->getZ(), $p->getLevel()), [$cmd], $this, count($this->blocksConfig->get("blocks")));
        $this->saveBlock($block);
        $this->blocksConfig->save();
        return $block;
    }

    /**
     * @param Block $block
     */
    public function saveBlock(Block $block){
        $this->blocks[$block->getPosition()->getX() . ":" . $block->getPosition()->getY() . ":" . $block->getPosition()->getZ() . ":" . $block->getPosition()->getLevel()->getName()] = $block;
        $blocks = $this->blocksConfig->get("blocks");
        $blocks[$block->id] = $block->toArray();
        $this->blocksConfig->set("blocks", $blocks);
        $this->blocksConfig->save();
    }
    /**
     *
     */
    public function onDisable(){
        $this->getLogger()->info("Saving blocks...");
        foreach($this->blocks as $block){
            $this->saveBlock($block);
        }
        $this->blocksConfig->save();
    }
}
#   _____         _____    ______
#  |_   _|       |_   _|   |  _  \
#    | | __ _ _ __ | | ___ | | | |___
#    | |/ _` | '_ \| |/ _ \| | | / _ \
#    | | (_| | |_) | | (_) | |/ / (_) |
#    \_/\__,_| .__/\_/\___/|___/ \___/
#            | |
#            |_|  Execute commands on block tap!
# ** When you add a blocks this annoying message will be removed (It's a feature)
version: 1
blocks: []<?php
namespace taptodo;

use pocketmine\utils\Config;

class ConfigUpdater{
    /** @var Config  */
    private $config;
    /** @var TapToDo  */
    private $tapToDo;
    const CONFIG_VERSION = 1;
    public function __construct(Config $config, TapToDo $tapToDo){
        $this->config = $config;
        $this->tapToDo = $tapToDo;
        $this->version = $this->config->get("version", 0);
    }
    public function checkConfig(){
        if($this->version > ConfigUpdater::CONFIG_VERSION){
            $this->tapToDo->getLogger()->warning("The config loaded is not supported. It may not function correctly. ");
        }
        while($this->version < ConfigUpdater::CONFIG_VERSION){
            switch($this->version){
                case 0:
                    $this->tapToDo->getLogger()->info("Updating config from version 0 to 1...");
                    $blocks = $this->config->getAll();
                    foreach($blocks as $id => $block){
                        foreach($block["commands"] as $i => $command){
                            if(strpos($command, "%safe") === false && strpos($command, "%op") === false){
                                $command .= "%pow";
                            }
                            $block["commands"][$i] = str_replace("%safe", "", $command);
                        }
                        $blocks[$id] = $block;
                    }
                    unlink($this->tapToDo->getDataFolder() . "blocks.yml");
                    $this->tapToDo->saveResource("blocks.yml");
                    $this->config = new Config($this->tapToDo->getDataFolder() . "blocks.yml", Config::YAML);
                    $this->config->set("version", 1);
                    $this->config->set("blocks", $blocks);
                    $this->config->save();
                    $this->version = 1;
                    break;
            }
        }
        return $this->config;
    }
}<?php
namespace taptodo;

use pocketmine\level\Position;
use pocketmine\Player;

class Block{
    /** @var  Command[] */
    private $commands;
    /** @var  Position */
    private $position;
    /** @var mixed */
    private $name;
    /** @var TapToDo  */
    private $plugin;
    public $id;
    public function __construct(Position $position, array $commands, TapToDo $main, $id, $name = false){
        $this->position = $position;
        $this->commands = [];
        $this->plugin = $main;
        $this->name = $name;
        $this->id = $id;

        $this->addCommands($commands);
    }
    public function addCommands($cmds){
        if(!is_array($cmds)){
            $cmds = [$cmds];
        }
        foreach ($cmds as $c) {
            $this->commands[] = new Command($c, $this->plugin);
        }
        $this->plugin->saveBlock($this);
    }
    public function addCommand($cmd){
        $this->addCommands([$cmd]);
    }
    public function deleteCommand($cmd){
        $ret = false;
        for($i = count($this->commands); $i >= 0; $i--){
            if($this->commands[$i]->getOriginalCommand() === $cmd || $this->commands[$i]->getCompiledCommand() === $cmd){
                unset($this->commands[$i]);
                $ret = true;
            }
        }
        if($ret){
            $this->plugin->saveBlock($this);
        }
        return $ret;
    }
    public function executeCommands(Player $player){
        foreach($this->commands as $command){
            $command->execute($player);
        }
    }
    public function setName($name){
        $this->name = $name;
    }
    public function getCommands(){
        $out = [];
        foreach($this->commands as $command) $out[] = $command->getOriginalCommand();
        return $out;
    }
    public function getName(){
        return $this->name;
    }

    /**
     * @return Position
     * @deprecated
     */
    public function getPos(){
        return $this->position;
    }
    public function getPosition(){
        return $this->position;
    }
    public function toArray(){
        $arr = [
            'x' => $this->getPosition()->getX(),
            'y' => $this->getPosition()->getY(),
            'z' => $this->getPosition()->getZ(),
            'level' => $this->getPosition()->getLevel()->getName(),
            'commands' => $this->getCommands()
        ];
        if($this->name !== false) $arr["name"] = $this->name;
        return $arr;
    }
}
