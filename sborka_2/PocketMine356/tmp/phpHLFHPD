
# PurePerms by 64FF00 (xktiverz@gmail.com, @64ff00 for Twitter)

name: PurePerms
main: _64FF00\PurePerms\PurePerms
version: "1.2.2"
api: [1.12.0]
load: STARTUP
author: 64FF00
website: https://github.com/PurePlugins/PurePerms
permissions:
  pperms:
    description: "PurePerms by 64FF00! (Twitter: @64FF00)"
    children:
      pperms.command:
        description: "Allows you to use all PurePerms commands."
        children:
          pperms.command.addgroup:
            description: "Allows you to add a new group to the groups list."
          pperms.command.defgroup:
            description: "Allows you to set the default group manually."
          pperms.command.fperms:
            description: "Allows you to find permissions for a specific plugin."
          pperms.command.groups:
            description: "Allows you to see a list of all groups."
          pperms.command.listgperms:
            description: "Allows you to see a list of all permissions from a group."
          pperms.command.listuperms:
            description: "Allows you to see a list of all permissions from a user."
          pperms.command.ppinfo:
            default: true
            description: "Allows you to get current PurePerms information."
          pperms.command.ppreload:
            description: "Allows you to reload all PurePerms configurations."
          pperms.command.removegroup:
            description: "Allows you to remove a group from the groups list."
          pperms.command.setgperm:
            description: "Allows you to add a permission to the group."
          pperms.command.setgroup:
            description: "Allows you to set group for a user."
          pperms.command.setuperm:
            description: "Allows you to add a permission to a user."
          pperms.command.unsetgperm:
            description: "Allows you to remove a permission from the group."
          pperms.command.unsetuperm:
            description: "Allows you to remove a permission from the user."
          pperms.command.usrinfo:
            description: "Allows you to see info about a user."<?php

namespace _64FF00\PurePerms;

use _64FF00\PurePerms\cmd\AddGroup;
use _64FF00\PurePerms\cmd\DefGroup;
use _64FF00\PurePerms\cmd\FPerms;
use _64FF00\PurePerms\cmd\Groups;
use _64FF00\PurePerms\cmd\ListGPerms;
use _64FF00\PurePerms\cmd\ListUPerms;
use _64FF00\PurePerms\cmd\PPInfo;
use _64FF00\PurePerms\cmd\PPReload;
use _64FF00\PurePerms\cmd\RmGroup;
use _64FF00\PurePerms\cmd\SetGPerm;
use _64FF00\PurePerms\cmd\SetGroup;
use _64FF00\PurePerms\cmd\SetUPerm;
use _64FF00\PurePerms\cmd\UnsetGPerm;
use _64FF00\PurePerms\cmd\UnsetUPerm;
use _64FF00\PurePerms\cmd\UsrInfo;
use _64FF00\PurePerms\data\UserDataManager;
use _64FF00\PurePerms\provider\DefaultProvider;
use _64FF00\PurePerms\provider\ProviderInterface;
use _64FF00\PurePerms\provider\SQLite3Provider;

use pocketmine\IPlayer;

use pocketmine\permission\PermissionAttachment;

use pocketmine\Player;

use pocketmine\plugin\PluginBase;

class PurePerms extends PluginBase
{
    /*
        PurePerms by 64FF00 (Twitter: @64FF00)

          888  888    .d8888b.      d8888  8888888888 8888888888 .d8888b.   .d8888b.
          888  888   d88P  Y88b    d8P888  888        888       d88P  Y88b d88P  Y88b
        888888888888 888          d8P 888  888        888       888    888 888    888
          888  888   888d888b.   d8P  888  8888888    8888888   888    888 888    888
          888  888   888P "Y88b d88   888  888        888       888    888 888    888
        888888888888 888    888 8888888888 888        888       888    888 888    888
          888  888   Y88b  d88P       888  888        888       Y88b  d88P Y88b  d88P
          888  888    "Y8888P"        888  888        888        "Y8888P"   "Y8888P"
    */

    const CORE_PERM = "\x70\x70\x65\x72\x6d\x73\x2e\x63\x6f\x6d\x6d\x61\x6e\x64\x2e\x70\x70\x69\x6e\x66\x6f";

    const NOT_FOUND = null;
    const INVALID_NAME = -1;
    const ALREADY_EXISTS = 0;
    const SUCCESS = 1;

    private $isGroupsLoaded = false;

    private $isUUIDSupported = false;

    /** @var PPMessages $messages */
    private $messages;

    /** @var ProviderInterface $provider */
    private $provider;

    /** @var UserDataManager $userDataMgr */
    private $userDataMgr;

    private $attachments = [], $groups = [];

    public function onLoad()
    {
        $this->saveDefaultConfig();

        $this->messages = new PPMessages($this);

        $this->userDataMgr = new UserDataManager($this);

        if($this->getConfigValue("enable-multiworld-perms") === false)
        {
            $this->getLogger()->notice($this->getMessage("logger_messages.onEnable_01"));
            $this->getLogger()->notice($this->getMessage("logger_messages.onEnable_02"));
        }
        else
        {
            $this->getLogger()->notice($this->getMessage("logger_messages.onEnable_03"));
        }
    }
    
    public function onEnable()
    {
        $this->registerCommands();

        $this->setProvider();

        $this->checkForUUIDSupport();

        $this->registerPlayers();

        $this->getServer()->getPluginManager()->registerEvents(new PPListener($this), $this);
    }

    public function onDisable()
    {
        $this->unregisterPlayers();

        if($this->isValidProvider())
            $this->provider->close();
    }

    private function checkForUUIDSupport()
    {
        $tempClasses = [];
        $declaredClasses = \get_declared_classes();

        foreach(array_values($declaredClasses) as $class)
        {
            $tempClasses[$class] = true;
        }

        if(isset($tempClasses['pocketmine\utils\UUID']))
            $this->isUUIDSupported = true;
    }

    private function registerCommands()
    {
        $commandMap = $this->getServer()->getCommandMap();

        $commandMap->register("addgroup", new AddGroup($this, "addgroup", $this->getMessage("cmds.addgroup.desc")));
        $commandMap->register("defgroup", new DefGroup($this, "defgroup", $this->getMessage("cmds.defgroup.desc")));
        $commandMap->register("fperms", new FPerms($this, "fperms", $this->getMessage("cmds.fperms.desc")));
        $commandMap->register("groups", new Groups($this, "groups", $this->getMessage("cmds.groups.desc")));
        $commandMap->register("listgperms", new ListGPerms($this, "listgperms", $this->getMessage("cmds.listgperms.desc")));
        $commandMap->register("listuperms", new ListUPerms($this, "listuperms", $this->getMessage("cmds.listuperms.desc")));
        $commandMap->register("ppinfo", new PPInfo($this, "ppinfo", $this->getMessage("cmds.ppinfo.desc")));
        $commandMap->register("ppreload", new PPReload($this, "ppreload", $this->getMessage("cmds.ppreload.desc")));
        $commandMap->register("rmgroup", new RmGroup($this, "rmgroup", $this->getMessage("cmds.rmgroup.desc")));
        $commandMap->register("setgperm", new SetGPerm($this, "setgperm", $this->getMessage("cmds.setgperm.desc")));
        $commandMap->register("setgroup", new SetGroup($this, "setgroup", $this->getMessage("cmds.setgroup.desc")));
        $commandMap->register("setuperm", new SetUPerm($this, "setuperm", $this->getMessage("cmds.setuperm.desc")));
        $commandMap->register("unsetgperm", new UnsetGPerm($this, "unsetgperm", $this->getMessage("cmds.unsetgperm.desc")));
        $commandMap->register("unsetuperm", new UnsetUPerm($this, "unsetuperm", $this->getMessage("cmds.unsetuperm.desc")));
        $commandMap->register("usrinfo", new UsrInfo($this, "usrinfo", $this->getMessage("cmds.usrinfo.desc")));
    }

    /**
     * @param bool $onEnable
     */
    private function setProvider($onEnable = true)
    {
        $providerName = $this->getConfigValue("data-provider");

        switch(strtolower($providerName))
        {
            case "sqlite3":

                $provider = new SQLite3Provider($this);

                if($onEnable === true)
                    $this->getLogger()->info($this->getMessage("logger_messages.setProvider_SQLite3"));

                break;

            case "yaml":

                $provider = new DefaultProvider($this);

                if($onEnable === true)
                    $this->getLogger()->info($this->getMessage("logger_messages.setProvider_YAML"));

                break;

            default:

                $provider = new DefaultProvider($this);

                if($onEnable === true)
                    $this->getLogger()->warning($this->getMessage("logger_messages.setProvider_NotFound"));

                break;
        }

        if(!$this->isValidProvider())
            $this->provider = $provider;

        $this->updateGroups();
    }

    /*
          888  888          d8888 8888888b. 8888888
          888  888         d88888 888   Y88b  888
        888888888888      d88P888 888    888  888
          888  888       d88P 888 888   d88P  888
          888  888      d88P  888 8888888P"   888
        888888888888   d88P   888 888         888
          888  888    d8888888888 888         888
          888  888   d88P     888 888       8888888
    */

    /**
     * @param $groupName
     * @return bool
     */
    public function addGroup($groupName)
    {
        $groupsData = $this->getProvider()->getGroupsData(true);

        if(!$this->isValidGroupName($groupName))
            return self::INVALID_NAME;

        if(isset($groupsData[$groupName]))
            return self::ALREADY_EXISTS;

        $groupsData[$groupName] = [
            "isDefault" => false,
            "inheritance" => [
            ],
            "permissions" => [
            ],
            "worlds" => [
            ]
        ];

        $this->getProvider()->setGroupsData($groupsData);

        $this->updateGroups();

        return self::SUCCESS;
    }

    /**
     * @param Player $player
     * @return null|\pocketmine\permission\PermissionAttachment
     */
    public function getAttachment(Player $player)
    {
        $uniqueId = $this->getValidUUID($player);

        if(!isset($this->attachments[$uniqueId]))
            throw new \RuntimeException("Tried to calculate permissions on " .  $player->getName() . " using null attachment");

        return $this->attachments[$uniqueId];
    }

    /**
     * @param $key
     * @return null
     */
    public function getConfigValue($key)
    {
        $value = $this->getConfig()->getNested($key);

        if($value === null)
        {
            $this->getLogger()->warning($this->getMessage("logger_messages.getConfigValue_01", $key));

            return null;
        }

        return $value;
    }

    /**
     * @return PPGroup|null
     */
    public function getDefaultGroup()
    {
        $defaultGroups = [];

        foreach($this->getGroups() as $defaultGroup)
        {
            if($defaultGroup->isDefault())
                $defaultGroups[] = $defaultGroup;
        }

        if(count($defaultGroups) === 1)
        {
            return $defaultGroups[0];
        }
        else
        {
            if(count($defaultGroups) > 1)
            {
                $this->getLogger()->warning($this->getMessage("logger_messages.getDefaultGroup_01"));
            }
            elseif(count($defaultGroups) <= 0)
            {
                $this->getLogger()->warning($this->getMessage("logger_messages.getDefaultGroup_02"));

                $defaultGroups = $this->getGroups();
            }

            $this->getLogger()->info($this->getMessage("logger_messages.getDefaultGroup_03"));

            foreach($defaultGroups as $defaultGroup)
            {
                if(count($defaultGroup->getInheritedGroups()) === 0)
                {
                    $this->setDefaultGroup($defaultGroup);

                    return $defaultGroup;
                }
            }
        }

        return null;
    }

    /**
     * @param $groupName
     * @return PPGroup|null
     */
    public function getGroup($groupName)
    {
        if(!isset($this->groups[$groupName]))
        {
            $this->getLogger()->debug($this->getMessage("logger_messages.getGroup_01", $groupName));

            return null;
        }

        /** @var PPGroup $group */
        $group = $this->groups[$groupName];

        if(empty($group->getData()))
        {
            $this->getLogger()->warning($this->getMessage("logger_messages.getGroup_02", $groupName));

            return null;
        }

        return $group;
    }

    /**
     * @return PPGroup[]
     */
    public function getGroups()
    {
        if($this->isGroupsLoaded != true)
            throw new \RuntimeException("No groups loaded, maybe a provider error?");

        return $this->groups;
    }

    /**
     * @param $node
     * @param ...$vars
     * @return string
     */
    public function getMessage($node, ...$vars)
    {
        return $this->messages->getMessage($node, ...$vars);
    }

    /**
     * @param PPGroup $group
     * @return array
     */
    public function getOnlinePlayersInGroup(PPGroup $group)
    {
        $users = [];

        foreach($this->getServer()->getOnlinePlayers() as $player)
        {
            foreach($this->getServer()->getLevels() as $level)
            {
                $levelName = $level->getName();

                if($this->userDataMgr->getGroup($player, $levelName) === $group)
                    $users[] = $player;
            }
        }

        return $users;
    }

    /**
     * @param IPlayer $player
     * @param $levelName
     * @return array
     */
    public function getPermissions(IPlayer $player, $levelName)
    {
        // TODO: ...
        $group = $this->userDataMgr->getGroup($player, $levelName);

        $groupPerms = $group->getGroupPermissions($levelName);
        $userPerms = $this->userDataMgr->getUserPermissions($player, $levelName);

        return array_merge($groupPerms, $userPerms);
    }

    /**
     * @param $userName
     * @return Player
     */
    public function getPlayer($userName)
    {
        $player = $this->getServer()->getPlayer($userName);

        return $player instanceof Player ? $player : $this->getServer()->getOfflinePlayer($userName);
    }

    /**
     * @return string
     */
    public function getPPVersion()
    {
        return $this->getDescription()->getVersion();
    }

    /**
     * @return ProviderInterface
     */
    public function getProvider()
    {
        if(!$this->isValidProvider())
            $this->setProvider(false);

        return $this->provider;
    }

    /**
     * @return UserDataManager
     */
    public function getUserDataMgr()
    {
        return $this->userDataMgr;
    }

    /**
     * @param Player $player
     * @return null|string
     */
    public function getValidUUID(Player $player)
    {
        if($this->isUUIDSupported)
        {
            if($player->getUniqueId() === null) return null;

            $uniqueId = $player->getUniqueId()->toString();
        }
        else
        {
            $uniqueId = $player->getUniqueId();
        }

        return $uniqueId;
    }

    /**
     * @param $groupName
     * @return int
     */
    public function isValidGroupName($groupName)
    {
        return preg_match('/[0-9a-zA-Z\xA1-\xFE]$/', $groupName);
    }

    /**
     * @return bool
     */
    public function isValidProvider()
    {
        if(!isset($this->provider) || $this->provider == null || !($this->provider instanceof ProviderInterface))
            return false;

        return true;
    }

    /**
     * @param Player $player
     */
    public function registerPlayer(Player $player)
    {
        $this->getLogger()->debug($this->getMessage("logger_messages.registerPlayer", $player->getName()));

        $uniqueId = $this->getValidUUID($player);

        $attachment = $player->addAttachment($this);

        $this->attachments[$uniqueId] = $attachment;

        $this->updatePermissions($player);
    }

    public function registerPlayers()
    {
        foreach($this->getServer()->getOnlinePlayers() as $player)
        {
            $this->registerPlayer($player);
        }
    }

    public function reload()
    {
        $this->reloadConfig();
        $this->saveDefaultConfig();

        $this->messages->reloadMessages();

        if(!$this->isValidProvider())
            $this->setProvider(false);
    }

    /**
     * @param $groupName
     * @return bool
     */
    public function removeGroup($groupName)
    {
        if(!$this->isValidGroupName($groupName))
            return self::INVALID_NAME;

        $groupsData = $this->getProvider()->getGroupsData(true);

        if(!isset($groupsData[$groupName]))
            return self::NOT_FOUND;

        unset($groupsData[$groupName]);

        $this->getProvider()->setGroupsData($groupsData);

        $this->updateGroups();

        return self::SUCCESS;
    }

    /**
     * @param PPGroup $group
     */
    public function setDefaultGroup(PPGroup $group)
    {
        foreach($this->getGroups() as $currentGroup)
        {
            $isDefault = $currentGroup->getNode("isDefault");

            if($isDefault)
                $currentGroup->removeNode("isDefault");
        }

        $group->setDefault();
    }

    /**
     * @param IPlayer $player
     * @param PPGroup $group
     * @param null $levelName
     */
    public function setGroup(IPlayer $player, PPGroup $group, $levelName = null)
    {
        $this->userDataMgr->setGroup($player, $group, $levelName);
    }

    public function sortGroupPermissions()
    {
        foreach($this->getGroups() as $groupName => $ppGroup)
        {
            $ppGroup->sortPermissions();
        }
    }

    /**
     * @SoBored ...
     */
    public function updateGroups()
    {
        if(!$this->isValidProvider()) throw new \RuntimeException("Failed to load groups: Invalid Data Provider");

        // Make group list empty first to reload it
        $this->groups = [];

        foreach(array_keys($this->getProvider()->getGroupsData()) as $groupName)
        {
            $this->groups[$groupName] = new PPGroup($this, $groupName);
        }

        $this->isGroupsLoaded = true;

        $this->sortGroupPermissions();
    }

    /**
     * @param IPlayer $player
     */
    public function updatePermissions(IPlayer $player)
    {
        if($player instanceof Player)
        {
            $levelName = $this->getConfigValue("enable-multiworld-perms") ? $player->getLevel()->getName() : null;

            $permissions = [];

            foreach($this->getPermissions($player, $levelName) as $permission)
            {
                if($permission === "*")
                {
                    foreach($this->getServer()->getPluginManager()->getPermissions() as $tmp)
                    {
                        $permissions[$tmp->getName()] = true;
                    }
                }
                else
                {
                    $isNegative = substr($permission, 0, 1) === "-";

                    if($isNegative)
                        $permission = substr($permission, 1);

                    $permissions[$permission] = !$isNegative;
                }
            }

            $permissions[self::CORE_PERM] = true;

            /** @var PermissionAttachment $attachment */
            $attachment = $this->getAttachment($player);

            $attachment->clearPermissions();

            $attachment->setPermissions($permissions);
        }
    }

    /**
     * @param PPGroup $group
     */
    public function updatePlayersInGroup(PPGroup $group)
    {
        foreach($this->getServer()->getOnlinePlayers() as $player)
        {
            if($this->userDataMgr->getGroup($player) === $group)
                $this->updatePermissions($player);

            if($this->getConfigValue("enable-multiworld-perms") == true)
            {
                foreach($this->getServer()->getLevels() as $level)
                {
                    $levelName = $level->getName();

                    if($this->userDataMgr->getGroup($player, $levelName) === $group)
                        $this->updatePermissions($player, $levelName);
                }
            }
        }
    }

    /**
     * @param Player $player
     */
    public function unregisterPlayer(Player $player)
    {
        $this->getLogger()->debug($this->getMessage("logger_messages.unregisterPlayer", $player->getName()));

        $uniqueId = $this->getValidUUID($player);

        // Do not try to remove attachments with invalid unique ids
        if($uniqueId !== null)
        {
            if(isset($this->attachments[$uniqueId]))
                $player->removeAttachment($this->attachments[$uniqueId]);

            unset($this->attachments[$uniqueId]);
        }
    }

    public function unregisterPlayers()
    {
        foreach($this->getServer()->getOnlinePlayers() as $player)
        {
            $this->unregisterPlayer($player);
        }
    }
}
<?php

namespace _64FF00\PurePerms;              

use pocketmine\utils\Config;                                                    

class PPMessages
{
    /*
        PurePerms by 64FF00 (Twitter: @64FF00)

          888  888    .d8888b.      d8888  8888888888 8888888888 .d8888b.   .d8888b.
          888  888   d88P  Y88b    d8P888  888        888       d88P  Y88b d88P  Y88b
        888888888888 888          d8P 888  888        888       888    888 888    888
          888  888   888d888b.   d8P  888  8888888    8888888   888    888 888    888
          888  888   888P "Y88b d88   888  888        888       888    888 888    888
        888888888888 888    888 8888888888 888        888       888    888 888    888
          888  888   Y88b  d88P       888  888        888       Y88b  d88P Y88b  d88P
          888  888    "Y8888P"        888  888        888        "Y8888P"   "Y8888P"
    */

    private $language, $messages;
    
    private $langList = [];

    /**
     * @param PurePerms $plugin
     */
    public function __construct(PurePerms $plugin)
    {
        $this->plugin = $plugin;
        
        $this->registerLanguages();
        
        $this->loadMessages();
    }

    public function registerLanguages()
    {
        $result = [];
        
        foreach($this->plugin->getResources() as $resource)
        {
            if(mb_strpos($resource, "messages-") !== false) $result[] = substr($resource, -6, -4);
        }
        
        $this->langList = $result;
    }

    /**
     * @param $node
     * @param ...$vars
     * @return mixed|null
     */
    public function getMessage($node, ...$vars)
    {
        $msg = $this->messages->getNested($node);
        
        if($msg != null)
        {
            $number = 0;
            
            foreach($vars as $v)
            {           
                $msg = str_replace("%var$number%", $v, $msg);
                
                $number++;
            }
            
            return $msg;
        }
        
        return null;
    }

    /**
     * @return mixed
     */
    public function getVersion()
    {
        $version = $this->messages->get("messages-version");

        return $version;
    }

    public function loadMessages()
    {       
        $defaultLang = $this->plugin->getConfigValue("default-language");
        
        foreach($this->langList as $langName)
        {
            if(strtolower($defaultLang) == $langName)
            {
                $this->language = $langName;
            }
        }
        
        if(!isset($this->language))
        {
            $this->plugin->getLogger()->warning("Language resource " . $defaultLang . " not found. Using default language resource by " . $this->plugin->getDescription()->getAuthors()[0]);
            
            $this->language = "en";
        }
        
        $this->plugin->saveResource("messages-" . $this->language . ".yml");
        
        $this->messages = new Config($this->plugin->getDataFolder() . "messages-" . $this->language . ".yml", Config::YAML, [
        ]);
        
        $this->plugin->getLogger()->info("Setting default language to '" . $defaultLang . "'");
        
        if(version_compare($this->getVersion(), $this->plugin->getPPVersion()) == -1)
        {
            $this->plugin->saveResource("messages-" . $this->language . ".yml", true);
        
            $this->messages = new Config($this->plugin->getDataFolder() . "messages-" . $this->language . ".yml", Config::YAML, [
            ]);
        }
    }
    
    public function reloadMessages()
    {
        $this->messages->reload();
    }    
}
# PurePerms by 64FF00 (xktiverz@gmail.com, @64ff00 for Twitter)

---
# Set default data provider for PurePerms
# - yaml, sqlite3
data-provider: yaml

# Set the default language for PurePerms
# - en, ko, jp, ru, it, sp, cz, sk, de
# English message resource by @64FF00 and @Samueljh1 (GitHub)
# Korean message resource by @64FF00 (GitHub)
# 제 블로그 이외에 허락없이 마음대로 플러그인 배포하실 시에는 바로 한국어 파일 삭제 조치하고 공유 중단합니다
# Japanese message resource by @onebone (<3) and @haniokasai (GitHub)
# Russian message resource by @vvzar and @Pub4Game (GitHub)
# Italian message resource by @AryToNeX (GitHub)
# Spanish message resource by @iksaku (<3) and @JoahDave (Github)
# Czech message resource by @Michael2010117 (GitHub)
# Slovak message resource by @Michael2010117 (GitHub)
# German message resource by @Exxarion (GitHub)
default-language: en

# Setting this option will allow you to use per-world permissions
# - true / false
enable-multiworld-perms: false

# // NOT FINISHED YET
# MySQL Settings (Only configure this if you are going to use MySQL data provider)
#mysql-settings:
  # Thank you for 100k downloads btw... Love you all <3 #64FF00
  #host: "PurePerms-FTW.loveyou.all"
  #port: 3306
  #user: "YourUsernameGoesHere"
  #password: "YourPasswordGoesHere"
  #db: "YourDBNameGoesHere"
...

# PurePerms by 64FF00 (xktiverz@gmail.com, @64ff00 for Twitter)

# Russian language resource by @vvzar and @Pub4Game 

---
messages-version: "1.2.0"
language: "ru"
cmds:
  addgroup:
    desc: "Добавляет новую группу в список групп. #64FF00"
    usage: "Пример: /addgroup <группа>"
    messages:
      group_added_successfully: "Группа %var0% успешно создана."
      group_already_exists: "Ошибка! Группа %var0% уже существует."
      invalid_group_name: "Недопустимое название для группы."
  defgroup:
    desc: "Изменяет группу по умолчанию. #64FF00"
    usage: "Пример: /defgroup <группа>"
    messages:
      defgroup_successfully: "Группа по умолчанию успешно изменена на %var0%."
      group_not_exist: "Группа %var0% не существует."     
  fperms:
    desc: "Показывает список всех разрешений для указанного плагина. #64FF00"
    usage: "Пример: /fperms <плагин>"
    messages:
      no_plugin_perms: "У плагина %var0% нет никаких разрешений."
      plugin_not_exist: "Плагин %var0% не найден."
      plugin_perms_list: "Список всех разрешений для плагина %var0% (%var1% / %var2%):"
  groups:
    desc: "Показывает список всех групп. #64FF00"
    messages:
      all_registered_groups: "Все зарегистрированные группы: %var0%"
  listgperms: 
    desc: "Показывает список всех разрешений для группы. #64FF00"
    usage: "Пример: /listgperms <группа> <страница> [мир]"
    messages:
      group_not_exist: "Группа %var0% не существует."
      group_perms_list: "Список всех разрешений для группы %var0% (%var1% / %var2%):"
      level_not_exist: "Мир %var0% не существует."
      no_group_perms: "У группы %var0% нет никаких разрешений."
  listuperms: 
    desc: "Показывает список всех разрешений для указанного игрока. #64FF00"
    usage: "Пример: /listuperms <игрок> <страница> [мир]"
    messages:
      level_not_exist: "Мир %var0% не существует."
      no_user_perms: "У игрока %var0% нет никаких пользовательских разрешений."
      user_perms_list: "Список всех разрешений для игрока %var0% (%var1% / %var2%):" 
  ppinfo: 
    desc: "Показывает всю информацию о плагине PurePerms, включая версию, автора и т.д. #64FF00"
    messages:
      ppinfo_console: "Вы используете PurePerms версии v%var0% от %var1%."
      ppinfo_player: "На этом сервере используется PurePerms версии %var0% от %var1%."
  ppreload: 
    desc: "Перезагружает все настройки PurePerms."
    messages: 
      successfully_reloaded: "Все настройки плагина были успешно перезагружены."
  rmgroup: 
    desc: "Удаляет указанную группу. #64FF00"
    usage: "Пример: /rmgroup <группа>"
    messages:
      group_removed_successfully: "Группа %var0% успешно удалена."
      group_not_exist: "Группа %var0% не существует."
      invalid_group_name: "Недопустимое название для группы."
  setgperm: 
    desc: "Добавляет разрешение группе. #64FF00"
    usage: "Пример: /setgperm <группа> <разрешение> [мир]"
    messages:
      gperm_added_successfully: "Разрешение %var0% успешно добавлено в группу."
      group_not_exist: "Группа %var0% не существует."
      level_not_exist: "Мир %var0% не существует."
  setgroup: 
    desc: "Добавляет игрока в группу. #64FF00"
    usage: "Пример: /setgroup <игрок> <группа> [мир]"
    messages: 
      group_not_exist: "Группа %var0% не существует."
      level_not_exist: "Мир %var0% не существует."
      setgroup_successfully: "Игрок %var0% успешно добавлен в группу."
      on_player_group_change: "Ваша группа изменена на %var0%!"
  setuperm: 
    desc: "Добавляет разрешение пользователю. #64FF00"
    usage: "Пример: /setuperm <игрок> <разрешение> [мир]"
    messages:
      level_not_exist: "Мир %var0% не существует."
      uperm_added_successfully: "Разрешение %var0% успешно добавлено игроку %var1%."
  unsetgperm: 
    desc: "Отбирает разрешение у группы. #64FF00"
    usage: "Пример: /unsetgperm <группа> <разрешение> [мир]"
    messages:
      gperm_removed_successfully: "Разрешение %var0% успешно отобрано у группы."
      group_not_exist: "Группа %var0% не существует."
      level_not_exist: "Мир %var0% не существует."
  unsetuperm: 
    desc: "Отбирает разрешение у игрока. #64FF00"
    usage: "Пример: /unsetuperm <игрок> <разрешение> [мир]"
    messages: 
      level_not_exist: "Мир %var0% не существует."
      uperm_removed_successfully: "Разрешение %var0% успешно отобрано у игрока %var1%."
  usrinfo: 
    desc: "Показывает информацию об игроке. #64FF00"
    usage: "Пример: /usrinfo <игрок> [мир]"
    messages:
      level_not_exist: "Мир %var0% не существует."
      status_online: "ОНЛАЙН!"
      status_offline: "НЕ В ИГРЕ."
      usrinfo_header: "<--- Информация об игроке %var0% --->"
      usrinfo_username: "ИГРОК: %var0%"
      usrinfo_status: "СТАТУС: %var0%"
      usrinfo_ip: "IP: %var0%"
      usrinfo_uuid: "UNIQUE ID: %var0%"
      usrinfo_group: "ГРУППА: %var0%"
      unknown: "Неизвестно"
logger_messages:
  getConfigValue_01: "Ключ %var0% не найден в файле config.yml."
  getDefaultGroup_01: "Было указано более одной группы, назначаемой по-умолчанию в файле groups.yml."
  getDefaultGroup_02: "Не обнаружено ни одной группы, назначаемой по-умолчанию в файле groups.yml."
  getDefaultGroup_03: "Группа с параметром Default назначается автоматически."
  getGroup_01: "Группа %var0% не найдена."
  getGroup_02: "Группа %var0% имеет неправильные или поврежденные данные."
  onEnable_01: "Поддержка мульти миров в настоящее время отключена."
  onEnable_02: "Не забудьте установить для параметра enable-multiworld-perms в файле config.yml значение true, если хотите иметь разные разрешения в различных мирах!"
  onEnable_03: "Поддержка мульти миров включена."
  registerPlayer: "Регистрация игрока %var0%..."
  setProvider_MySQL: "Тип хранилища данных - MySQL."
  setProvider_SQLite3: "Тип хранилища данных  - SQLite3."
  setProvider_YAML: "Тип хранилища данных - YAML."
  setProvider_NotFound: "Провайдер данных %var0% не существует. Устанавливается стандартный тип хранилища данных."
  unregisterPlayer: "Отмена регистрации игрока %var0%..."
...<?php

namespace _64FF00\PurePerms\data;

use _64FF00\PurePerms\PPGroup;
use _64FF00\PurePerms\PurePerms;
use _64FF00\PurePerms\event\PPGroupChangedEvent;

use pocketmine\IPlayer;

class UserDataManager
{
    /*
        PurePerms by 64FF00 (Twitter: @64FF00)

          888  888    .d8888b.      d8888  8888888888 8888888888 .d8888b.   .d8888b.
          888  888   d88P  Y88b    d8P888  888        888       d88P  Y88b d88P  Y88b
        888888888888 888          d8P 888  888        888       888    888 888    888
          888  888   888d888b.   d8P  888  8888888    8888888   888    888 888    888
          888  888   888P "Y88b d88   888  888        888       888    888 888    888
        888888888888 888    888 8888888888 888        888       888    888 888    888
          888  888   Y88b  d88P       888  888        888       Y88b  d88P Y88b  d88P
          888  888    "Y8888P"        888  888        888        "Y8888P"   "Y8888P"
    */

    /**
     * @param PurePerms $plugin
     */
    public function __construct(PurePerms $plugin)
    {
        $this->plugin = $plugin;
    }

    /**
     * @param IPlayer $player
     * @return array
     */
    public function getData(IPlayer $player)
    {
        return $this->plugin->getProvider()->getPlayerData($player);
    }

    /**
     * @param IPlayer $player
     * @param null $levelName
     * @return PPGroup|null
     */
    public function getGroup(IPlayer $player, $levelName = null)
    {
        $groupName = $levelName != null ? $this->getWorldData($player, $levelName)["group"] : $this->getNode($player, "group");

        $group = $this->plugin->getGroup($groupName);

        return $group;
    }

    /**
     * @param IPlayer $player
     * @param $node
     * @return null|mixed
     */
    public function getNode(IPlayer $player, $node)
    {
        $userData = $this->getData($player);

        if(!isset($userData[$node])) return null;

        return $userData[$node];
    }

    /**
     * @param null $levelName
     * @return array
     */
    public function getUserPermissions(IPlayer $player, $levelName = null)
    {
        $permissions = $levelName != null ? $this->getWorldData($player, $levelName)["permissions"] : $this->getNode($player, "permissions");

        if(!is_array($permissions))
        {
            $this->plugin->getLogger()->critical("Invalid 'permissions' node given to " . __METHOD__);

            return [];
        }

        return $permissions;
    }

    /**
     * @param IPlayer $player
     * @param $levelName
     * @return array
     */
    public function getWorldData(IPlayer $player, $levelName)
    {
        if($levelName === null) $levelName = $this->plugin->getServer()->getDefaultLevel()->getName();

        if(!isset($this->getData($player)["worlds"][$levelName]))
        {
            $tempUserData = $this->getData($player);

            $tempUserData["worlds"][$levelName] = [
                "group" => $this->plugin->getDefaultGroup()->getName(),
                "permissions" => [
                ]
            ];

            $this->setData($tempUserData);
        }

        return $this->getData($player)["worlds"][$levelName];
    }

    public function removeNode(IPlayer $player, $node)
    {
        $tempUserData = $this->getData($player);

        if(isset($tempUserData[$node]))
        {
            unset($tempUserData[$node]);

            $this->setData($player, $tempUserData);
        }
    }

    /**
     * @param IPlayer $player
     * @param array $data
     */
    public function setData(IPlayer $player, array $data)
    {
        $this->plugin->getProvider()->setPlayerData($player, $data);
    }

    /**
     * @param IPlayer $player
     * @param PPGroup $group
     * @param $levelName
     */
    public function setGroup(IPlayer $player, PPGroup $group, $levelName)
    {
        if($levelName === null)
        {
            $this->setNode($player, "group", $group->getName());
        }
        else
        {
            $worldData = $this->getWorldData($levelName);

            $worldData["group"] = $group->getName();

            $this->setWorldData($player, $levelName, $worldData);
        }

        $event = new PPGroupChangedEvent($this->plugin, $player, $group);

        $this->plugin->getServer()->getPluginManager()->callEvent($event);
    }

    /**
     * @param IPlayer $player
     * @param $node
     * @param $value
     */
    public function setNode(IPlayer $player, $node, $value)
    {
        $tempUserData = $this->getData($player);

        $tempUserData[$node] = $value;

        $this->setData($player, $tempUserData);
    }

    /**
     * @param IPlayer $player
     * @param $permission
     * @param null $levelName
     */
    public function setUserPermission(IPlayer $player, $permission, $levelName = null)
    {
        if($levelName === null)
        {
            $tempUserData = $this->getData($player);

            $tempUserData["permissions"][] = $permission;

            $this->setData($player, $tempUserData);
        }
        else
        {
            $worldData = $this->getWorldData($player, $levelName);

            $worldData["permissions"][] = $permission;

            $this->setWorldData($player, $levelName, $worldData);
        }

        $this->plugin->updatePermissions($player, $levelName);
    }

    public function setWorldData(IPlayer $player, $levelName, array $worldData)
    {
        if(isset($this->getData($player)["worlds"][$levelName]))
        {
            $tempUserData = $this->getData($player);

            $tempUserData["worlds"][$levelName] = $worldData;

            $this->setData($player, $tempUserData);
        }
    }

    /**
     * @param IPlayer $player
     * @param $permission
     * @param null $levelName
     */
    public function unsetPermission(IPlayer $player, $permission, $levelName = null)
    {
        if($levelName === null)
        {
            $tempUserData = $this->getData($player);

            if(!in_array($permission, $tempUserData["permissions"])) return;

            $tempUserData["permissions"] = array_diff($tempUserData["permissions"], [$permission]);

            $this->setData($player, $tempUserData);
        }
        else
        {
            $worldData = $this->getWorldData($player, $levelName);

            if(!in_array($permission, $worldData["permissions"])) return;

            $worldData["permissions"] = array_diff($worldData["permissions"], [$permission]);

            $this->setWorldData($player, $levelName, $worldData);
        }

        $this->plugin->updatePermissions($player, $levelName);
    }
}